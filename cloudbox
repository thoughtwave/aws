#!/bin/sh
export PATH=$HOME/bin:$PATH
CONF=/etc/lamptimer/instances.cfg
NOW=`/bin/date +'%w%H%M'`
AWK=/bin/awk
HOSTS=/var/tmp/lamptimer-hosts

case "`basename $0`" in
cloudbox)
 for i in `grep \)$ cloudbox | grep -v init | awk '{print $1}' | cut -f1 -d\) | xargs`
 do
  ln -s `basename $0` $i
 done
;;
cloudbox)

 echo CloudBOX is not meant to be run directly
;;

awsusage)

 aws ec2 describe-instances --query 'Reservations[*].Instances[].[InstanceType]' --output text | sort | uniq -c
 aws rds describe-db-instances --query 'DBInstances[*].[AllocatedStorage DBInstanceClass]' --output text | awk '{print $2}' | sort | uniq -c
;;

checkport)

 for IP in `instances`
 do
  nc -w 1 $IP $1 2>&1 > /dev/null && STATUS="OPEN" || STATUS="CLOSED"  
  echo "Check $IP port $1 is $STATUS"
 done
;;

instance2volume)

 aws ec2 describe-instances --instance-ids $1 --query 'Reservations[].Instances[].BlockDeviceMappings[].Ebs[].VolumeId' --output text
;;

instancelist)

 aws ec2 describe-instances --query 'Reservations[*].Instances[*].[NetworkInterfaces[].Association[].PublicIp Tags[?Key==`Name`].Value[] ]' --output text
;;

instances)

 aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text | grep -v None
;;

ison)

 NOW=`/bin/date +'%w%H%M'`
 if [ "$1" ] && [ "$1" != 'ON' ]
 then
  while [ "$1" ]
  do
    lb=`echo $1 | cut -f1 -d- | awk '{print $1}'`
    ub=`echo $1 | cut -f2 -d- | awk '{print $1}'`
    if [ "$NOW" -ge $lb ] && [ "$NOW" -le $ub ]
    then
     echo "$NOW"
    fi
    shift
  done
 else
  echo "$NOW"
 fi
;;

lamptimer)


 cp /dev/null $HOSTS

 while read line
 do
  instance=`echo $line | $AWK '{print $1}'`
  timings=`echo $line | $AWK '{for (i=2;i<=NF;++i)print $i}'`
  state=OFF
  while [ "$timings" ]
  do
   timeblock=`echo $timings | $AWK '{print $1}'`
   lb=`echo $timeblock | cut -f1 -d- | $AWK '{print $1}'`
   ub=`echo $timeblock | cut -f2 -d- | $AWK '{print $1}'`
   if [ "$NOW" -ge $lb ] && [ "$NOW" -le $ub ]
   then
    state="ON"
   fi
   timings=`echo $timings | $AWK '{for (i=2;i<=NF;++i)print $i}'`
  done
 
  if [ "$state" = "OFF" ]
  then
   STOPPED="$STOPPED $instance"
   aws ec2 stop-instances --instance-id $instance --output text
   aws ec2 describe-instances --instance-id $instance --query 'Reservations[*].Instances[*].[NetworkInterfaces[].Association[].PublicIp ]'
  else
   STARTED="$STARTED $instance"
   aws ec2 start-instances --instance-id $instance --output text
   instanceip=`aws ec2 describe-instances --instance-id i-992da953 --query 'Reservations[*].Instances[*].[NetworkInterfaces[].Association[].PublicIp]' --output text`
   if [ "$instanceip" ]
   then
    echo "$instanceip $instance" | tee -a $HOSTS
   else
    echo "No IP yet for $instance"
   fi
  fi
 done < $CONF
 
 if [ "$STARTED" ]
 then
  echo "Starting ($STARTED)"
 fi
 
 if [ "$STOPPED" ]
 then
  echo "Stopping ($STOPPED)"
 fi
;;

launchstatus)

 if [ $1 ]
 then
  stacks $1 | grep $1 | awk '{print $2}'
 else
  echo DOES_NOT_EXIST
 fi
;;

loadbalancers)

 aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].[CreatedTime DNSName]' --output text  
;;

 snapshot)

 aws ec2 create-snapshot --volume-id $1 --output table
;;

 snapstatus)

  aws ec2 describe-snapshots --query 'Snapshots[].[StartTime VolumeSize Progress SnapshotId Description]' --output table
;;

 stackevents)

 if [ $1 ]
 then
   aws cloudformation describe-stack-events --stack-name $1 --query 'StackEvents[*].[Timestamp LogicalResourceId ResourceStatus]' --output table
 else
  echo DOES_NOT_EXIST
 fi
;;

stacks)

 aws cloudformation describe-stacks --query 'Stacks[*].[StackName StackStatus]' --output text
;;

susd)

 INSTANCES=`aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId]' --output text | xargs`
 for INSTANCE in $INSTANCES
 do
  SETTING=`aws ec2 describe-tags --filters "Name=resource-id, Values=$INSTANCE" --query 'Tags[?Key==\`Schedule\`].Value[]' --output text`
  STATUS=`ison $SETTING`
  echo "$INSTANCE SHOULD BE $SETTING. $STATUS"
 done
;;

susdBatch)

 INSTANCES=`aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId]' --output text | xargs`
 for INSTANCE in $INSTANCES
 do
  STATUS=`aws ec2 describe-tags --filters "Name=resource-id, Values=$INSTANCE" --query 'Tags[?Key==\`Schedule\`].Value[]' --output text`
  NAME=`aws ec2 describe-tags --filters "Name=resource-id, Values=$INSTANCE" --query 'Tags[?Key==\`Name\`].Value[]' --output text`
  if [ "$STATUS" = "OFF" ]
  then
   STOPLIST="$STOPLIST $INSTANCE"
  fi
  if [ "$STATUS" = "ON" ]
  then
   STARTLIST="$STARTLIST $INSTANCE"
  fi
  echo "$INSTANCE ($NAME) $STATUS"
 done
 echo "STARTED: $STARTLIST"
 echo "STOPPED: $STOPLIST"
;;

susdQueryAll)

 INSTANCES=`aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId]' --output text | xargs`
 for INSTANCE in $INSTANCES
 do
  echo $INSTANCE `aws ec2 describe-tags --filters "Name=resource-id, Values=$INSTANCE" --query 'Tags[?Key==\`Schedule\`].Value[]' --output text`
 done
;;

susdStartAll)

 INSTANCES=`aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId]' --output text | xargs`
 for INSTANCE in $INSTANCES
 do
  echo $INSTANCE
  aws ec2 create-tags --resources $INSTANCE --tags Key=Schedule,Value=ON
 done
;;

waitforstack)

 SLEEPTIME=60
 if [ $1 ]
 then
   while [ `launchstatus $1` = 'CREATE_IN_PROGRESS' ]
   do
    echo Polling $1 status every $SLEEPTIME seconds
    stackevents $1  | grep -v COMPLETE
    sleep $SLEEPTIME
   done
   echo "If you don't see a new load balancer address below, your stack is not prsent."
   loadbalancers
 else
  echo Usage: $0 stackname
 fi
;;

volume2instancemap)
  aws ec2 describe-volumes --query 'Volumes[*].[Attachments[*].[VolumeId InstanceId]]' --output text
;;

esac
